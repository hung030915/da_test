// Generated by view binder compiler. Do not edit!
package com.example.s_shop.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.s_shop.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutItemAddressBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CheckBox chkChooseInfo;

  @NonNull
  public final TextView tvAddress;

  @NonNull
  public final TextView tvDefault;

  @NonNull
  public final TextView tvName;

  @NonNull
  public final TextView tvPhoneNumber;

  @NonNull
  public final TextView tvUpdateInfo;

  private LayoutItemAddressBinding(@NonNull LinearLayout rootView, @NonNull CheckBox chkChooseInfo,
      @NonNull TextView tvAddress, @NonNull TextView tvDefault, @NonNull TextView tvName,
      @NonNull TextView tvPhoneNumber, @NonNull TextView tvUpdateInfo) {
    this.rootView = rootView;
    this.chkChooseInfo = chkChooseInfo;
    this.tvAddress = tvAddress;
    this.tvDefault = tvDefault;
    this.tvName = tvName;
    this.tvPhoneNumber = tvPhoneNumber;
    this.tvUpdateInfo = tvUpdateInfo;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutItemAddressBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutItemAddressBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_item_address, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutItemAddressBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chkChooseInfo;
      CheckBox chkChooseInfo = ViewBindings.findChildViewById(rootView, id);
      if (chkChooseInfo == null) {
        break missingId;
      }

      id = R.id.tvAddress;
      TextView tvAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvAddress == null) {
        break missingId;
      }

      id = R.id.tvDefault;
      TextView tvDefault = ViewBindings.findChildViewById(rootView, id);
      if (tvDefault == null) {
        break missingId;
      }

      id = R.id.tvName;
      TextView tvName = ViewBindings.findChildViewById(rootView, id);
      if (tvName == null) {
        break missingId;
      }

      id = R.id.tvPhoneNumber;
      TextView tvPhoneNumber = ViewBindings.findChildViewById(rootView, id);
      if (tvPhoneNumber == null) {
        break missingId;
      }

      id = R.id.tvUpdateInfo;
      TextView tvUpdateInfo = ViewBindings.findChildViewById(rootView, id);
      if (tvUpdateInfo == null) {
        break missingId;
      }

      return new LayoutItemAddressBinding((LinearLayout) rootView, chkChooseInfo, tvAddress,
          tvDefault, tvName, tvPhoneNumber, tvUpdateInfo);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
