// Generated by view binder compiler. Do not edit!
package com.example.s_shop.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.s_shop.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FindProductBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView back;

  @NonNull
  public final ImageView deleteText;

  @NonNull
  public final EditText etdFind;

  @NonNull
  public final LinearLayout filter;

  @NonNull
  public final ImageView find;

  @NonNull
  public final RecyclerView recycleView;

  private FindProductBinding(@NonNull LinearLayout rootView, @NonNull ImageView back,
      @NonNull ImageView deleteText, @NonNull EditText etdFind, @NonNull LinearLayout filter,
      @NonNull ImageView find, @NonNull RecyclerView recycleView) {
    this.rootView = rootView;
    this.back = back;
    this.deleteText = deleteText;
    this.etdFind = etdFind;
    this.filter = filter;
    this.find = find;
    this.recycleView = recycleView;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FindProductBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FindProductBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.find_product, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FindProductBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back;
      ImageView back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.deleteText;
      ImageView deleteText = ViewBindings.findChildViewById(rootView, id);
      if (deleteText == null) {
        break missingId;
      }

      id = R.id.etdFind;
      EditText etdFind = ViewBindings.findChildViewById(rootView, id);
      if (etdFind == null) {
        break missingId;
      }

      id = R.id.filter;
      LinearLayout filter = ViewBindings.findChildViewById(rootView, id);
      if (filter == null) {
        break missingId;
      }

      id = R.id.find;
      ImageView find = ViewBindings.findChildViewById(rootView, id);
      if (find == null) {
        break missingId;
      }

      id = R.id.recycleView;
      RecyclerView recycleView = ViewBindings.findChildViewById(rootView, id);
      if (recycleView == null) {
        break missingId;
      }

      return new FindProductBinding((LinearLayout) rootView, back, deleteText, etdFind, filter,
          find, recycleView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
