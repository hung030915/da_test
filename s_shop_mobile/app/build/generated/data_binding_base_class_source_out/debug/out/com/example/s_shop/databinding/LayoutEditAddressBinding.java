// Generated by view binder compiler. Do not edit!
package com.example.s_shop.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.s_shop.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutEditAddressBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView btnSave;

  @NonNull
  public final CheckBox chkChooseDefault;

  @NonNull
  public final EditText edtAddress;

  @NonNull
  public final EditText edtPhoneNumber;

  @NonNull
  public final EditText edtUsername;

  @NonNull
  public final ImageView imgBack;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final LinearLayout linearLayout3;

  @NonNull
  public final Spinner spnCity;

  @NonNull
  public final Spinner spnDistrict;

  @NonNull
  public final Spinner spnWard;

  @NonNull
  public final TextView tvXoaDiaChi;

  private LayoutEditAddressBinding(@NonNull ConstraintLayout rootView, @NonNull TextView btnSave,
      @NonNull CheckBox chkChooseDefault, @NonNull EditText edtAddress,
      @NonNull EditText edtPhoneNumber, @NonNull EditText edtUsername, @NonNull ImageView imgBack,
      @NonNull LinearLayout linearLayout, @NonNull LinearLayout linearLayout3,
      @NonNull Spinner spnCity, @NonNull Spinner spnDistrict, @NonNull Spinner spnWard,
      @NonNull TextView tvXoaDiaChi) {
    this.rootView = rootView;
    this.btnSave = btnSave;
    this.chkChooseDefault = chkChooseDefault;
    this.edtAddress = edtAddress;
    this.edtPhoneNumber = edtPhoneNumber;
    this.edtUsername = edtUsername;
    this.imgBack = imgBack;
    this.linearLayout = linearLayout;
    this.linearLayout3 = linearLayout3;
    this.spnCity = spnCity;
    this.spnDistrict = spnDistrict;
    this.spnWard = spnWard;
    this.tvXoaDiaChi = tvXoaDiaChi;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutEditAddressBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutEditAddressBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_edit_address, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutEditAddressBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnSave;
      TextView btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.chkChooseDefault;
      CheckBox chkChooseDefault = ViewBindings.findChildViewById(rootView, id);
      if (chkChooseDefault == null) {
        break missingId;
      }

      id = R.id.edtAddress;
      EditText edtAddress = ViewBindings.findChildViewById(rootView, id);
      if (edtAddress == null) {
        break missingId;
      }

      id = R.id.edtPhoneNumber;
      EditText edtPhoneNumber = ViewBindings.findChildViewById(rootView, id);
      if (edtPhoneNumber == null) {
        break missingId;
      }

      id = R.id.edtUsername;
      EditText edtUsername = ViewBindings.findChildViewById(rootView, id);
      if (edtUsername == null) {
        break missingId;
      }

      id = R.id.imgBack;
      ImageView imgBack = ViewBindings.findChildViewById(rootView, id);
      if (imgBack == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.linearLayout3;
      LinearLayout linearLayout3 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout3 == null) {
        break missingId;
      }

      id = R.id.spnCity;
      Spinner spnCity = ViewBindings.findChildViewById(rootView, id);
      if (spnCity == null) {
        break missingId;
      }

      id = R.id.spnDistrict;
      Spinner spnDistrict = ViewBindings.findChildViewById(rootView, id);
      if (spnDistrict == null) {
        break missingId;
      }

      id = R.id.spnWard;
      Spinner spnWard = ViewBindings.findChildViewById(rootView, id);
      if (spnWard == null) {
        break missingId;
      }

      id = R.id.tvXoaDiaChi;
      TextView tvXoaDiaChi = ViewBindings.findChildViewById(rootView, id);
      if (tvXoaDiaChi == null) {
        break missingId;
      }

      return new LayoutEditAddressBinding((ConstraintLayout) rootView, btnSave, chkChooseDefault,
          edtAddress, edtPhoneNumber, edtUsername, imgBack, linearLayout, linearLayout3, spnCity,
          spnDistrict, spnWard, tvXoaDiaChi);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
