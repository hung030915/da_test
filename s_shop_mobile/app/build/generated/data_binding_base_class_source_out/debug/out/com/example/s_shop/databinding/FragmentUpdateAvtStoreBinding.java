// Generated by view binder compiler. Do not edit!
package com.example.s_shop.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.s_shop.R;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentUpdateAvtStoreBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CircleImageView imgAvtStore;

  @NonNull
  public final ImageView imgBack;

  @NonNull
  public final ImageView imgMayAnh;

  @NonNull
  public final LinearLayout linearLayout;

  private FragmentUpdateAvtStoreBinding(@NonNull ConstraintLayout rootView,
      @NonNull CircleImageView imgAvtStore, @NonNull ImageView imgBack,
      @NonNull ImageView imgMayAnh, @NonNull LinearLayout linearLayout) {
    this.rootView = rootView;
    this.imgAvtStore = imgAvtStore;
    this.imgBack = imgBack;
    this.imgMayAnh = imgMayAnh;
    this.linearLayout = linearLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentUpdateAvtStoreBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentUpdateAvtStoreBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_update_avt_store, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentUpdateAvtStoreBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.imgAvtStore;
      CircleImageView imgAvtStore = ViewBindings.findChildViewById(rootView, id);
      if (imgAvtStore == null) {
        break missingId;
      }

      id = R.id.imgBack;
      ImageView imgBack = ViewBindings.findChildViewById(rootView, id);
      if (imgBack == null) {
        break missingId;
      }

      id = R.id.imgMayAnh;
      ImageView imgMayAnh = ViewBindings.findChildViewById(rootView, id);
      if (imgMayAnh == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      return new FragmentUpdateAvtStoreBinding((ConstraintLayout) rootView, imgAvtStore, imgBack,
          imgMayAnh, linearLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
